{"version":3,"sources":["components/Cell.js","components/Row.js","components/Board.js","App.js","registerServiceWorker.js","index.js"],"names":["Cell","_ref","value","columnIndex","play","react_default","a","createElement","className","onClick","event","altKey","Row","row","map","cell","i","components_Cell","key","Board","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","player1","player2","curPlayer","board","terminateState","winner","_this2","concat","initGame","bind","Table_default","bordered","components_Row","prevProps","prevState","_this3","checkWinner","then","isWinner","setState","togglePlayer","_this4","toConsumableArray","Array","rows","keys","cols","fill","isDrop","dropCell","transposeBoard","col","length","unshift","_this5","tensor4d","flat","config","checkList","rules","asyncToGenerator","regenerator_default","mark","_callee2","rule","filter","output","wrap","_context2","prev","next","conv2d","flatten","data","sent","abrupt","Math","max","apply","total","stop","_x3","arguments","Promise","all","results","Component","defaultProps","App","src_components_Board","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.35274360.chunk.js","sourcesContent":["import React from 'react';\n\nconst Cell = ({ value, columnIndex, play }) => {\n  return (\n    <td className={'player_' + value} onClick={\n      (event) => {\n        if (event.altKey) {\n          return play(columnIndex, true)\n        }\n        play(columnIndex)\n      }}>\n      <div>{value}</div>\n    </td>\n  );\n};\n\nexport default Cell;\n","import React from 'react';\nimport Cell from './Cell';\n\nconst Row = ({ row, play }) => {\n  return (\n    <tr>\n      {row.map((cell, i) => (<Cell key={i} value={cell} columnIndex={i} play={play}></Cell>))}\n    </tr>\n  );\n};\n\nexport default Row;\n","import React, { Component } from 'react';\nimport Table from 'react-bootstrap/Table';\nimport { tensor4d, conv2d } from '@tensorflow/tfjs';\nimport Row from './Row';\nimport config from '../config/connectFour';\nimport './Board.css';\n\nclass Board extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      player1: 1,\n      player2: 2,\n      curPlayer: 1,\n      board: [],\n      terminateState: true,\n      winner: 0\n    }\n  }\n\n  render() {\n    return (\n      <section>\n        <div className={`navbar player_${this.state.winner}`}>\n          <button onClick={this.initGame.bind(this)} className=\"btn btn-light\">New game</button>\n          {this.state.winner ? <div>Winner!</div> : null}\n        </div>\n        <Table bordered>\n          <thead></thead>\n          <tbody>\n            {this.state.board.map((row, i) => (<Row key={i} row={row} play={this.play.bind(this)}></Row>))}\n          </tbody>\n        </Table>\n      </section>\n    )\n  }\n\n  componentWillMount() {\n    this.initGame();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const state = this.state;\n\n    if (prevState.curPlayer === state.curPlayer && prevState.terminateState === state.terminateState) {\n      const curPlayer = this.state.curPlayer;\n      this.checkWinner()\n        .then(isWinner => {\n          if (isWinner) {\n            this.setState({\n              winner: curPlayer,\n              terminateState: true\n            })\n          }\n          this.togglePlayer();\n        })\n    }\n  }\n\n  initGame() {\n    const board = [...Array(this.props.rows).keys()].map(i => Array(this.props.cols).fill(0));\n    this.setState({\n      board,\n      terminateState: false,\n      curPlayer: 1,\n      winner: 0\n     });\n  }\n\n  async play(columnIndex, isDrop) {\n    if (this.state.terminateState) return;\n\n    if (!isDrop) {\n      const board = this.state.board;\n      for (let i = this.props.rows - 1; i >= 0; i--) {\n        if (!board[i][columnIndex]) {\n          board[i][columnIndex] = this.state.curPlayer;\n          this.setState({ board });\n          return;\n        }\n      }\n    } else {\n      this.dropCell(columnIndex)\n    }\n  }\n\n  dropCell(columnIndex) {\n    const curPlayer = this.state.curPlayer;\n    const board = this.state.board;\n    const transposeBoard = board[0].map((col, i) => board.map(row => row[i]));\n\n    if (curPlayer === board[board.length - 1][columnIndex]) {\n      let row = transposeBoard[columnIndex];\n      row.unshift(0);\n      row.length -= 1;\n\n      this.setState({\n        board: transposeBoard[0].map((col, i) => transposeBoard.map(row => row[i]))\n      });\n    }\n  }\n\n  togglePlayer() {\n    if (this.state.curPlayer === this.state.player1) {\n      return this.setState({ curPlayer: this.state.player2 });\n    }\n    this.setState({ curPlayer: this.state.player1 });\n  }\n\n  async checkWinner() {\n    let board = this.state.board.map(row => row.map(i => i === this.state.curPlayer ? 1 : 0));\n    board = tensor4d(board.flat(2), [1, config.rows, config.cols, 1]);\n\n    const checkList = config.rules.map(async rule => {\n      const filter = rule.filter;\n      let output = conv2d(board, filter, 1, 'valid').flatten();\n      output = await output.data();\n      return Math.max(...output) === rule.total;\n    });\n    return await Promise.all(checkList).then(results => Math.max(...results))\n  }\n}\n\nBoard.defaultProps = {\n  cols: config.cols,\n  rows: config.rows\n};\n\nexport default Board;\n","import React, { Component } from 'react';\nimport Board from './components/Board';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1 className=\"App-title\">Connect Four</h1>\n        </header>\n        <Board/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}